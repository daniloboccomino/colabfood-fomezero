// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using globalsolution.fomezero.Persistence;

namespace globalsolution.fomezero.Migrations
{
    [DbContext(typeof(ColabfoodContext))]
    partial class ColabfoodContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("globalsolution.fomezero.Models.Advertising", b =>
                {
                    b.Property<int>("AdvertisingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("AdvertisingId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Advertisings");
                });

            modelBuilder.Entity("globalsolution.fomezero.Models.Charity", b =>
                {
                    b.Property<int>("CharityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("Document")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("UF")
                        .HasColumnType("longtext");

                    b.HasKey("CharityId");

                    b.ToTable("Charities");
                });

            modelBuilder.Entity("globalsolution.fomezero.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdvertisingId")
                        .HasColumnType("int");

                    b.Property<int?>("CharityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("DonationId");

                    b.HasIndex("AdvertisingId");

                    b.HasIndex("CharityId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("globalsolution.fomezero.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("Document")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("UF")
                        .HasColumnType("longtext");

                    b.HasKey("ProviderId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("globalsolution.fomezero.Models.Advertising", b =>
                {
                    b.HasOne("globalsolution.fomezero.Models.Provider", "Provider")
                        .WithMany("Advertisings")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("globalsolution.fomezero.Models.Donation", b =>
                {
                    b.HasOne("globalsolution.fomezero.Models.Advertising", "Advertising")
                        .WithMany()
                        .HasForeignKey("AdvertisingId");

                    b.HasOne("globalsolution.fomezero.Models.Charity", "Charity")
                        .WithMany("Donations")
                        .HasForeignKey("CharityId");

                    b.HasOne("globalsolution.fomezero.Models.Provider", "Provider")
                        .WithMany("Donations")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Advertising");

                    b.Navigation("Charity");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("globalsolution.fomezero.Models.Charity", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("globalsolution.fomezero.Models.Provider", b =>
                {
                    b.Navigation("Advertisings");

                    b.Navigation("Donations");
                });
#pragma warning restore 612, 618
        }
    }
}
